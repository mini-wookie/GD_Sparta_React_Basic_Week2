[{"/Users/wookie/sparta/week2-assignment/src/index.js":"1","/Users/wookie/sparta/week2-assignment/src/App.js":"2","/Users/wookie/sparta/week2-assignment/src/reportWebVitals.js":"3","/Users/wookie/sparta/week2-assignment/src/Score.js":"4","/Users/wookie/sparta/week2-assignment/src/Quiz.js":"5","/Users/wookie/sparta/week2-assignment/src/SwipeItem.js":"6","/Users/wookie/sparta/week2-assignment/src/Start.js":"7"},{"size":500,"mtime":1626332767379,"results":"8","hashOfConfig":"9"},{"size":1159,"mtime":1626508679992,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1626332767380,"results":"11","hashOfConfig":"9"},{"size":1430,"mtime":1626507520668,"results":"12","hashOfConfig":"9"},{"size":2581,"mtime":1626501930395,"results":"13","hashOfConfig":"9"},{"size":5488,"mtime":1626448565578,"results":"14","hashOfConfig":"9"},{"size":1765,"mtime":1626448458743,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1jv8pj4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/wookie/sparta/week2-assignment/src/index.js",[],["33","34"],"/Users/wookie/sparta/week2-assignment/src/App.js",["35"],"/Users/wookie/sparta/week2-assignment/src/reportWebVitals.js",[],"/Users/wookie/sparta/week2-assignment/src/Score.js",[],"/Users/wookie/sparta/week2-assignment/src/Quiz.js",["36","37","38","39","40"],"/Users/wookie/sparta/week2-assignment/src/SwipeItem.js",["41","42","43","44","45","46"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SwipeItem = React.memo(({ onSwipe }) => {\n  const swipe_div = React.useRef(null);\n  let swipe_status = \"ready\";\n  let target_classname = \"\";\n  let coordinate = {\n    start_x: 0,\n    start_y: 0,\n    end_x: 0,\n    end_y: 0,\n  };\n\n  React.useEffect(() => {\n    const reset = () => {\n      //   console.log(\"in reset\");\n      swipe_status = \"ready\";\n\n      coordinate = {\n        start_x: 0,\n        start_y: 0,\n        end_x: 0,\n        end_y: 0,\n      };\n\n      swipe_div.current.className = target_classname;\n\n      swipe_div.current.style.left = 0 + \"px\";\n      swipe_div.current.style.top = 0 + \"px\";\n    };\n\n    const touchStart = (e) => {\n      //   console.log(\"start\");\n\n      // 터치 시작 시, swipe_status를 touchstart로 변경해줍니다.\n      // 그리고 터치 시작한 좌표를 기록합니다!\n      // (중요! 그래야 터치 종료할 때 위치를 보고 왼쪽인지, 오른쪽인지 판별할 수 있겠죠!)\n      swipe_status = \"touchstart\";\n      target_classname = swipe_div.current.className;\n      // console로 터치 이벤트가 시작될 때 좌표를 확인해볼까요?\n      //   console.log(e.touches[0]);\n      //   console.log(e.touches[0].clientX);\n      //   console.log(e.touches[0].clientY);\n\n      //   좌표도 기록해줍니다 :)\n      coordinate = {\n        ...coordinate,\n        start_x: e.touches[0].clientX,\n        start_y: e.touches[0].clientY,\n      };\n    };\n\n    const touchEnd = (e) => {\n      swipe_status = \"touchend\";\n      //  touchEnd이벤트는 touches 대신, changedTouches가 있어요.\n      //   console.log(e.changedTouches[0]);\n      coordinate = {\n        ...coordinate,\n        end_x: e.changedTouches[0].clientX,\n        end_y: e.changedTouches[0].clientY,\n      };\n\n      //   x좌표 이동 거리를 구해줍니다.\n      let diff_x = coordinate.end_x - coordinate.start_x;\n      //   스와이프 방향 / 기본은 left로 뒀습니다!\n      let direct = \"left\";\n\n      // Match.abs() : 절대값을 구해주는 친구입니다.\n      if (Math.abs(diff_x) > 50) {\n        swipe_div.current.className = target_classname + \" swipe\";\n\n        // 움직인 방향에 따라 더 옴직이고 투명도를 0으로 (점점 사라지게) 줘봐요!\n        if (diff_x > 0) {\n          // console.log('move right');\n          direct = \"right\";\n          swipe_div.current.style.left = diff_x + 150 + \"px\";\n          swipe_div.current.style.opacity = 0;\n        } else {\n          direct = \"left\";\n          // console.log('move left');\n          //   console.log(diff_x - 150);\n          swipe_div.current.style.left = diff_x - 150 + \"px\";\n          swipe_div.current.style.opacity = 0;\n        }\n\n        // 300 ms후 reset 해줍니다!\n        // 이 300ms는 props로 받아서 처리해줘도 좋겠네요!\n        // props로 받아온, 콜백 함수도 여기서 처리해줄게요!\n        window.setTimeout(() => {\n          reset();\n          onSwipe(direct);\n        }, 300);\n        return;\n      }\n\n      //   reset 해줍니다.\n      reset();\n    };\n\n    const touchMove = (e) => {\n      // 스와이프 중 다른 이벤트가 발생하는 것을 막아줍니다\n      e.preventDefault();\n\n      //   console.log(\"in touch move!\");\n      // 현재 좌표(이동 중인 좌표)를 기록해줍니다.\n      let current_coordinate = {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY,\n      };\n\n      //   콘솔로 이동한 값이 어떻게 나오는 지 한번 확인해볼까요?\n      //   console.log(\n      //     current_coordinate.x - coordinate.start_x,\n      //     current_coordinate.y - coordinate.start_y\n      //   );\n\n      //   터치 중일 때 div가 따라 움직이도록 해줍시다!\n      swipe_div.current.style.left =\n        current_coordinate.x - coordinate.start_x + \"px\";\n      swipe_div.current.style.top =\n        current_coordinate.y - coordinate.start_y + \"px\";\n    };\n\n    // 터치 이벤트가 취소될 경우 원래 상태로 돌려줍니다!\n    const touchCancel = (e) => {\n      swipe_status = \"cancel\";\n      reset();\n    };\n\n    swipe_div.current.addEventListener(\"touchstart\", touchStart);\n    swipe_div.current.addEventListener(\"touchend\", touchEnd);\n    swipe_div.current.addEventListener(\"touchmove\", touchMove);\n    swipe_div.current.addEventListener(\"touchcancel\", touchCancel);\n\n    // 이부분은 이벤트 해제 부분이에요!\n    return () => {\n      // 만약 이벤트 걸었던 엘리먼트가 없으면 해제하지 않습니다!\n      if (!swipe_div.current) {\n        return;\n      }\n      swipe_div.current.removeEventListener(\"touchstart\", touchStart);\n      swipe_div.current.removeEventListener(\"touchend\", touchEnd);\n      swipe_div.current.removeEventListener(\"touchmove\", touchMove);\n      swipe_div.current.removeEventListener(\"touchcancel\", touchCancel);\n    };\n  }, []);\n\n  return (\n    <DragItem ref={swipe_div}>\n      <img src=\"https://spartacodingclub.kr/static/css/images/ogimage2.jpg\" />\n    </DragItem>\n  );\n});\n\nconst DragItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n\n  &.swipe {\n    transition: 300ms;\n  }\n\n  & > div {\n    border-radius: 500px;\n    background-color: #ffd6aa;\n  }\n  & img {\n    max-width: 150px;\n  }\n`\n\nSwipeItem.defaultProps = {\n  onSwipe: (direction) => {},\n};\n\nexport default SwipeItem;","/Users/wookie/sparta/week2-assignment/src/Start.js",["47"],"import React from \"react\";\n\nconst Start = (props) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        width: \"100vw\",\n        overflow: \"hidden\",\n        padding: \"16px\",\n        boxSizing: \"border-box\",\n      }}\n    >\n      <div\n        className=\"outter\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          width: \"100vw\",\n          overflow: \"hidden\",\n          padding: \"0px 10vw\",\n          boxSizing: \"border-box\",\n          maxWidth: \"400px\",\n        }}\n      >\n        <img src=\"https://spartacodingclub.kr/static/css/images/ogimage2.jpg\" style={{ width: \"80%\", margin: \"16px\" }} />\n        <h1 style={{ fontSize: \"1.5em\", margin: \"0px\", lineHeight: \"1.4\" }}>\n          나는{\" \"}\n          <span\n            style={{\n              backgroundColor: \"#fef5d4\",\n              padding: \"5px 10px\",\n              borderRadius: \"30px\",\n            }}\n          >\n            {props.name}\n          </span>\n          에 대해 얼마나 알고 있을까?\n        </h1>\n        <input\n          type=\"text\"\n          style={{\n            padding: \"10px\",\n            margin: \"24px 0px\",\n            border: \"1px solid #dadafc\",\n            borderRadius: \"30px\",\n            width: \"100%\",\n            // backgroundColor: \"#dadafc55\",\n          }}\n          placeholder=\"내 이름\"\n        />\n        <button\n          style={{\n            padding: \"8px 24px\",\n            backgroundColor: \"#dadafc\",\n            borderRadius: \"30px\",\n            border: \"#dadafc\",\n          }}\n        >\n          시작하기\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Start;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":17},{"ruleId":"52","severity":1,"message":"57","line":11,"column":11,"nodeType":"54","messageId":"55","endLine":11,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":27,"column":38,"nodeType":"60","messageId":"61","endLine":27,"endColumn":40},{"ruleId":"58","severity":1,"message":"59","line":38,"column":38,"nodeType":"60","messageId":"61","endLine":38,"endColumn":40},{"ruleId":"62","severity":1,"message":"63","line":48,"column":33,"nodeType":"64","endLine":48,"endColumn":187},{"ruleId":"65","severity":1,"message":"66","line":18,"column":22,"nodeType":"67","endLine":18,"endColumn":29},{"ruleId":"65","severity":1,"message":"68","line":20,"column":20,"nodeType":"69","endLine":25,"endColumn":8},{"ruleId":"65","severity":1,"message":"70","line":40,"column":26,"nodeType":"71","endLine":40,"endColumn":53},{"ruleId":"52","severity":1,"message":"72","line":127,"column":7,"nodeType":"54","messageId":"55","endLine":127,"endColumn":19},{"ruleId":"65","severity":1,"message":"73","line":145,"column":17,"nodeType":"54","endLine":145,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":151,"column":7,"nodeType":"64","endLine":151,"endColumn":79},{"ruleId":"62","severity":1,"message":"63","line":30,"column":9,"nodeType":"64","endLine":30,"endColumn":122},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'SwipeItem' is defined but never used.","'list' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Assignments to the 'swipe_status' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","Assignments to the 'coordinate' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","ObjectExpression","Assignments to the 'target_classname' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","MemberExpression","'swipe_status' is assigned a value but never used.","The ref value 'swipe_div.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'swipe_div.current' to a variable inside the effect, and use that variable in the cleanup function.","no-global-assign","no-unsafe-negation"]